<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notebook</title>
    <script src="src/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }
        
        h1, h2 {
            color: #2c3e50;
        }
        
        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }
        
        .markdown-editor {
            width: 100%;
            min-height: 400px;
            border: 1px solid #ddd;
            padding: 15px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
            font-size: 14px;
            line-height: 1.6;
            border-radius: 4px;
            resize: vertical;
        }
        
        .view-controls {
            margin-bottom: 15px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .view-controls button {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid #ddd;
            background-color: #f8f8f8;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.2s ease;
            outline: none;
        }
        
        .view-controls button:hover {
            background-color: #e9e9e9;
            border-color: #ccc;
        }
        
        .view-controls button.active {
            background-color: #4CAF50;
            color: white;
            border-color: #4CAF50;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .view-container {
            display: none;
            width: 100%;
        }
        
        .active-view {
            display: block;
        }
        
        .mindmap-container {
            width: 100%;
            height: 500px;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: auto;
            background-color: #f9f9f9;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        
        .user-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            background-color: #f8f8f8;
            padding: 10px;
            border-radius: 4px;
        }
        
        .status-indicators {
            display: flex;
            gap: 15px;
            align-items: center;
        }
        
        .db-status, .save-status {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #666;
        }
        
        .status-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 5px;
            background-color: #ccc; /* Default color */
        }
        
        .status-dot.connected { background-color: #4CAF50; } /* Green for connected */
        .status-dot.disconnected { background-color: #f44336; } /* Red for disconnected */
        .status-dot.checking { background-color: #FFC107; } /* Yellow for checking */
        
        .save-status .status-icon {
            display: inline-block;
            width: 12px;
            height: 12px;
            margin-right: 5px;
            background-size: contain;
            background-repeat: no-repeat;
        }
        
        .save-status.saved .status-icon {
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%234CAF50" width="24" height="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>');
        }
        
        .save-status.saving .status-icon {
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23FFC107" width="24" height="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"/></svg>');
            animation: rotate 2s linear infinite;
        }
        
        .save-status.failed .status-icon {
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23f44336" width="24" height="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/></svg>');
        }
        
        @keyframes rotate {
            100% { transform: rotate(360deg); }
        }
        
        .user-section button {
            padding: 8px 15px;
            margin-left: 10px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .user-section button:hover {
            background-color: #2980b9;
        }
        
        .search-section {
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f8f8;
            border-radius: 4px;
        }
        
        .search-section input {
            padding: 8px 12px;
            width: 70%;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 10px;
        }
        
        .search-section button {
            padding: 8px 15px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .note-item {
            margin-bottom: 10px;
            padding: 12px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        
        .markdown-toggle {
            margin-bottom: 10px;
        }
        
        .toggle-btn {
            padding: 5px 15px;
            margin-right: 5px;
            cursor: pointer;
            border: 1px solid #ccc;
            background-color: #f8f8f8;
            border-radius: 4px;
        }
        
        .toggle-btn.active {
            background-color: #4CAF50;
            color: white;
            border-color: #4CAF50;
        }
        
        .markdown-subview {
            display: none;
            width: 100%;
        }
        
        .active-subview {
            display: block;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .preview {
            min-height: 400px;
            border: 1px solid #ddd;
            padding: 15px;
            background-color: white;
            border-radius: 4px;
            overflow-y: auto;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        }
        
        .preview h1, .preview h2, .preview h3 {
            margin-top: 0.5em;
            margin-bottom: 0.5em;
            color: #2c3e50;
        }
        
        .preview p {
            margin-bottom: 1em;
        }
        
        .preview strong {
            font-weight: 600;
            color: #2c3e50;
        }
        
        .preview em {
            font-style: italic;
            color: #34495e;
        }
    </style>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #editor {
            height: 300px;
            margin-bottom: 20px;
        }
        #searchResults {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
        }
        
        /* Markdown Toolbar Styles */
        .markdown-toolbar {
            display: flex;
            gap: 5px;
            margin-bottom: 10px;
            padding: 8px;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            border-radius: 4px;
            flex-wrap: wrap;
        }
        
        .toolbar-btn {
            padding: 5px 10px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .toolbar-btn:hover {
            background-color: #e0e0e0;
        }
        
        .markdown-toggle {
            display: flex;
            margin-bottom: 10px;
        }
        
        .toggle-btn {
            padding: 8px 15px;
            cursor: pointer;
            border: 1px solid #ddd;
            background-color: #f8f8f8;
            border-radius: 4px 4px 0 0;
            font-weight: 500;
            transition: all 0.2s ease;
            margin-right: 5px;
        }
        
        .toggle-btn.active {
            background-color: #4CAF50;
            color: white;
            border-color: #4CAF50;
        }
        
        .markdown-subview {
            display: none;
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 0 4px 4px 4px;
        }
        
        .active-subview {
            display: block;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="user-section">
            <div class="status-indicators">
                <div class="db-status" id="dbStatus">
                    <span class="status-dot"></span>
                    <span class="status-text">DB: Checking...</span>
                </div>
                <div class="save-status" id="saveStatus">
                    <span class="status-icon"></span>
                    <span class="status-text">Not saved</span>
                </div>
            </div>
            <span>Welcome, <span id="userDisplayName">Guest</span></span>
            <button id="logoutButton">Logout</button>
            <button id="loginPageButton">Login/Register</button>
        </div>
        
        <h1>Notebook</h1>

    <!-- Editor Area -->
    <div class="view-controls">
        <button id="markdownViewBtn" class="active">Markdown View</button>
        <button id="mindmapViewBtn">Mind Map View</button>
        <button id="saveButton">Save Note</button>
    </div>
    
    <div id="markdownView" class="view-container active-view">
        <div class="markdown-toggle">
            <button id="editorToggleBtn" class="toggle-btn active">Editor</button>
            <button id="previewToggleBtn" class="toggle-btn">Preview</button>
        </div>
        <div id="editorContainer" class="markdown-subview active-subview">
            <div class="markdown-toolbar">
                <button class="toolbar-btn" data-action="bold" title="Bold">B</button>
                <button class="toolbar-btn" data-action="italic" title="Italic">I</button>
                <button class="toolbar-btn" data-action="heading" title="Heading">H</button>
                <button class="toolbar-btn" data-action="link" title="Link">🔗</button>
                <button class="toolbar-btn" data-action="image" title="Image">🖼️</button>
                <button class="toolbar-btn" data-action="list" title="List">•</button>
                <button class="toolbar-btn" data-action="code" title="Code">{ }</button>
                <button class="toolbar-btn" data-action="quote" title="Quote">"</button>
                <button class="toolbar-btn" data-action="hr" title="Horizontal Rule">―</button>
            </div>
            <textarea id="editor" class="markdown-editor" placeholder="Write your markdown here..."></textarea>
        </div>
        <div id="previewContainer" class="markdown-subview">
            <div id="preview" class="preview"></div>
        </div>
    </div>
    
    <div id="mindmapView" class="view-container">
        <div id="mindmap" class="mindmap-container"></div>
    </div>

    <!-- Search Functionality -->
    <div class="search-section">
        <h2>Search Notes</h2>
        <input type="text" id="searchInput" placeholder="Enter search term">
        <button id="searchButton">Search</button>
        <div id="searchResults"></div>
    </div>
    
    <!-- User Notes -->
    <div class="notes-section">
        <h2>Your Notes</h2>
        <div id="userNotes"></div>
    </div>
    
    </div> <!-- End of app-container -->

    <!-- Include only D3.js for our custom mind map implementation -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    
    <!-- Custom mind map implementation -->
    <script>
      // Create our custom mind map renderer
      window.addEventListener('load', function() {
        window.renderMindMap = function(markdown, container) {
          // Create the mind map only when there's valid content
          if (!markdown || !container) return;
          
          try {
            // Clear the container first
            container.innerHTML = '';
            
            // Parse the markdown to create a hierarchical structure
            const data = parseMarkdownToHierarchy(markdown);
            
            // Create the mind map visualization
            createMindMap(data, container);
          } catch (error) {
            console.error('Mind map error:', error);
            container.innerHTML = '<div style="padding: 20px; color: red;">Error rendering mind map: ' + error.message + '</div>';
          }
        };
        
        // Function to parse markdown into a hierarchical structure
        function parseMarkdownToHierarchy(markdown) {
          // Create root node
          const root = {
            name: 'Root',
            children: []
          };
          
          // Split markdown by lines
          const lines = markdown.split('\n');
          
          // Track nodes at each heading level
          const nodeStack = [root];
          let prevLevel = 0;
          
          // Process each line
          lines.forEach(line => {
            // Check if line is a heading
            const match = line.match(/^(#+)\s+(.+)$/);
            if (match) {
              const level = match[1].length;
              const text = match[2].trim();
              
              // Create new node
              const node = {
                name: text,
                children: []
              };
              
              // Adjust the stack based on heading level
              if (level > prevLevel) {
                // Child of previous node
                nodeStack[nodeStack.length - 1].children.push(node);
              } else {
                // Go back up the tree
                while (nodeStack.length > level) {
                  nodeStack.pop();
                }
                // Add to parent
                nodeStack[nodeStack.length - 1].children.push(node);
              }
              
              // Push this node to the stack
              nodeStack.push(node);
              prevLevel = level;
            }
          });
          
          return root;
        }
        
        // Function to create the mind map visualization
        function createMindMap(data, container) {
          // Set up dimensions
          const width = container.offsetWidth;
          const height = 500;
          const margin = { top: 20, right: 120, bottom: 20, left: 120 };
          
          // Create the SVG element
          const svg = d3.select(container)
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", `translate(${margin.left},${height/2})`);
          
          // Create a tree layout
          const treeLayout = d3.tree().size([height - margin.top - margin.bottom, width - margin.left - margin.right]);
          
          // Convert the data to D3 hierarchy
          const root = d3.hierarchy(data);
          
          // Assign positions to nodes
          const treeData = treeLayout(root);
          
          // Add links between nodes
          svg.selectAll(".link")
            .data(treeData.links())
            .enter()
            .append("path")
            .attr("class", "link")
            .attr("fill", "none")
            .attr("stroke", "#555")
            .attr("stroke-width", 1.5)
            .attr("d", d3.linkHorizontal()
              .x(d => d.y)
              .y(d => d.x));
          
          // Add nodes
          const nodes = svg.selectAll(".node")
            .data(treeData.descendants())
            .enter()
            .append("g")
            .attr("class", "node")
            .attr("transform", d => `translate(${d.y},${d.x})`);
          
          // Add circles to nodes
          nodes.append("circle")
            .attr("r", 7)
            .style("fill", d => d.depth === 0 ? "#fff" : "#4CAF50")
            .style("stroke", "#4CAF50")
            .style("stroke-width", 2);
          
          // Add text to nodes
          nodes.append("text")
            .attr("dy", "0.31em")
            .attr("x", d => d.children ? -10 : 10)
            .attr("text-anchor", d => d.children ? "end" : "start")
            .text(d => d.data.name)
            .style("font-size", "14px")
            .style("font-family", "Arial, sans-serif");
          
          // Add title for hover effect
          nodes.append("title")
            .text(d => d.data.name);
        }
      });
    </script>
    
    <!-- Include the external JavaScript file -->
    <script src="js/app.js"></script>
</body>
</html>